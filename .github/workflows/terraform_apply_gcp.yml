name: Terraform CI/CD

on:
  workflow_dispatch:
  repository_dispatch:
    types: [terraform_apply]
  push:
    branches:
      - main
    paths:
      - '.github/workflows/terraform_apply_gcp.yml'

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        id: authenticate
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

        # The Google Cloud SDK is used to generate an access token when authenticating with Artifact Registry. Make sure that it is installed and initialised with Application Default Credentials before proceeding.

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: set credentials file
        run: >-
          gcloud auth login --cred-file=${{steps.authenticate.outputs.credentials_file_path}}

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.0.0

      # - name: Terraform Init
      #   id: init
      #   run: terraform init
      #   working-directory: terraform

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt
      #   working-directory: terraform

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate
      #   working-directory: terraform

      # Run a gcloud command to test authentication
      - name: List Google Cloud Projects
        run: |
          gcloud projects list

      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -out=tfplan
      #   working-directory: terraform

      # - name: Terraform Apply
      #   id: apply
      #   run: terraform apply -auto-approve tfplan
      #   working-directory: terraform

      # Deploy the docker image to kubernetes
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml
      #     kubectl apply -f k8s/service.yaml
      


      # Deploy the image from Artifact Registry to Cloud Run with environment variables1
      - name: Deploy to Cloud Run
        id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'gha-runner-service-${{ github.run_id }}'
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_VAL }}/my-repo/actions-runner:latest
          env_vars: |
            GITHUB_PAT=${{ secrets.GH_RUNNER_PAT }}
            GITHUB_REPOSITORY=gh-actions
            GITHUB_OWNER=sam-nash
          region: ${{ vars.GCP_REGION }}
          flags: '--no-allow-unauthenticated --platform managed --port 8080 --service-account ${{ vars.GCP_SERVICE_ACCOUNT }}'

      - name: Get Deployed Service Name
        id: get-service-name
        run: |
          SERVICE_NAME=$(gcloud run services list --filter="metadata.name:gha-runner-service" --format="value(metadata.name)" --region ${{ vars.GCP_REGION }})
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_ENV

      - name: Monitor Logs and Tear Down
        run: |
          while true; do
            LOGS=$(gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ steps.get-service-name.outputs.SERVICE_NAME }} AND textPayload: 'Job self_hosted_job completed with result: Succeeded'" --limit 1 --format "value(textPayload)")
            if [[ ! -z "$LOGS" ]]; then
              echo "Job completed. Tearing down the Cloud Run service."
              gcloud run services delete ${{ steps.get-service-name.outputs.SERVICE_NAME }} --region ${{ vars.GCP_REGION }} --platform managed --quiet
              break
            fi
            echo "Waiting for job to complete..."
            sleep 30
          done