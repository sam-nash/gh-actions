# Workflow to plan and apply Terraform changes to GCP
# Triggered by a push to the main branch or a repository dispatch event from anotther repository
name: Terraform CI/CD

on:
  workflow_dispatch:
  repository_dispatch:
    types: [terraform_plan, terraform_apply]

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions: 
      contents: read
      id-token: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Set ENV variables
        run: |
          echo "TARGET_GCP_PROJECT=${{ github.event.client_payload.project_name }}" >> $GITHUB_ENV
          echo "CLOUDSDK_CORE_PROJECT=${{ github.event.client_payload.project_name }}" >> $GITHUB_ENV
          echo "GH_REPOSITORY=${{ github.event.client_payload.repository }}" >> $GITHUB_ENV
          GH_REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
          echo "GH_REPO_NAME=${GH_REPO_NAME}" >> $GITHUB_ENV
          echo "TF_WORKING_DIR=terraform" >> $GITHUB_ENV         
          echo "GH_PR_NUMBER=${{ github.event.client_payload.pr_number }}" >> $GITHUB_ENV
          echo "GH_PR_EVENT=${{ github.event.client_payload.pr_event }}" >> $GITHUB_ENV
          echo "GH_PR_MERGED=${{ github.event.client_payload.pr_merged }}" >> $GITHUB_ENV

          # print the environment variables
          echo "Printing all ENV vars set on the runner :"
          printenv | sort

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ${{ env.GH_REPOSITORY }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to Google Cloud
        id: authenticate
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      # Run a gcloud command to test authentication
      - name: List Google Cloud Projects
        run: |
          gcloud projects list

      # The Google Cloud SDK is used to generate an access token when authenticating with Artifact Registry. 
      # Make sure that it is installed and initialised with Application Default Credentials before proceeding.
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      # - name: set credentials file
      #   run: >-
      #     gcloud auth login --cred-file=${{steps.authenticate.outputs.credentials_file_path}}

      # Target GCP project to apply Terraform plan
      - name: Set GCP Project
        run: |
          echo "The Target GCP Project is: $TARGET_GCP_PROJECT"
          gcloud config set project $TARGET_GCP_PROJECT

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.0.0

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$TARGET_GCP_PROJECT-tfstate"
        # working-directory: terraform
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="$TARGET_GCP_PROJECT.tfvars" -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: PR Comment
        uses: actions/github-script@v7
        if: github.event.action == 'terraform_plan' && env.GH_PR_EVENT == 'opened'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_PAT}}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: "google_cloud",
              issue_number: process.env.GH_PR_NUMBER,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ env.GH_EVENT }}\`, Working Directory: "google_cloud/terraform", Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: "google_cloud",
                comment_id: botComment.id,
                body: output
              })
            } 
            else {
              github.rest.issues.createComment({
                issue_number: process.env.GH_PR_NUMBER,
                owner: context.repo.owner,
                repo: "google_cloud",
                body: output
              })
            }
        

      - name : Check 
        run: |
          echo echo "The Repository is: ${{ env.GH_REPO_NAME }}"
          echo "The pr_event is: ${{ env.GH_PR_EVENT }}"
          echo "The pr_merged is: ${{ env.GH_PR_MERGED }}"

      - name: Terraform Apply
        if: github.event.action == 'terraform_apply'
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform