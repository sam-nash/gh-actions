# Workflow to plan and apply Terraform changes to GCP
# Triggered by a push to the main branch or a repository dispatch event from anotther repository
name: Terraform CI/CD

on:
  workflow_dispatch:
  repository_dispatch:
    types: [terraform_plan, terraform_apply]

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        id: authenticate
        uses: google-github-actions/auth@v2
        with:
          create_credentials_file: true
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      # Run a gcloud command to test authentication
      - name: List Google Cloud Projects
        run: |
          gcloud projects list

      # The Google Cloud SDK is used to generate an access token when authenticating with Artifact Registry. 
      # Make sure that it is installed and initialised with Application Default Credentials before proceeding.
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      # - name: set credentials file
      #   run: >-
      #     gcloud auth login --cred-file=${{steps.authenticate.outputs.credentials_file_path}}

      # Target GCP project to apply Terraform plan
      - name: Set GCP Project
        run: |
          echo "TARGET_GCP_PROJECT=${{ github.event.client_payload.project_name }}" >> $GITHUB_ENV
          echo "The Target GCP Project is: ${{ github.event.client_payload.project_name }}"
          echo "CLOUDSDK_CORE_PROJECT=${{ github.event.client_payload.project_name }}" >> $GITHUB_ENV
          gcloud config set project ${{ github.event.client_payload.project_name }}


      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.0.0

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ github.event.client_payload.project_name }}-tfstate"
        working-directory: terraform

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="${{ github.event.client_payload.project_name }}.tfvars" -out=tfplan
        working-directory: terraform

      - name: Check if tfplan file exists
        if: github.event.action == 'terraform_plan'
        run: |
          if [ -f terraform/tfplan ]; then
            echo "tfplan file exists."
          else
            echo "tfplan file does not exist."
            exit 1
          fi

      - name: Terraform Show
        id: tf_show
        if: ${{ github.event.client_payload.pr_event }} == 'opened'
        run: terraform show -json tfplan > tfplan.json
        working-directory: terraform

      # Post Terraform Plan as a comment on the PR
      - name: Post Plan as PR Comment
        if: ${{ steps.tf_show.outcome }} == 'success'
        run: |
          PLAN_OUTPUT=$(jq -r '.resource_changes[] | select(.change.actions | index("create") or index("update") or index("delete")) | .address' < terraform/tfplan.json)
          echo "PLAN_OUTPUT=$PLAN_OUTPUT" >> $GITHUB_ENV
        # curl -X POST \
        #   -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        #   -H "Content-Type: application/json" \
        #   -d "{\"body\": \"Terraform Plan Output:\n\`\`\`\n$PLAN_OUTPUT\n\`\`\`\"}" \
        #   https://api.github.com/repos/${{ github.event.client_payload.repository }}/pulls/${{ github.event.client_payload.pr_number }}/comments

      # Post PLAN_OUTPUT as a comment on the PR using github script
      - name: Post Plan as PR Comment
        if: ${{ steps.tf_show.outcome }} == 'success'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = process.env.PLAN_OUTPUT;
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Terraform Plan Output:\n\`\`\`\n${planOutput}\n\`\`\``
            });

      - name : Check 
        run: |
          echo "The pr_event is: ${{ github.event.client_payload.pr_event }}"
          echo "The pr_merged is: ${{ github.event.client_payload.pr_merged }}"

      # - name: Terraform Apply
      #   if: ${{ github.event.client_payload.pr_event }} == 'closed' && ${{ github.event.client_payload.pull_request.merged }} == true
      #   id: apply
      #   run: terraform apply -auto-approve tfplan
      #   working-directory: terraform